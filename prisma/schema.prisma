generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  passwordHash   String? 
  zip            Int?

  rides       RideAttendee[]
  hostRides   Ride[]   @relation("RideHostRelation")

  // üß≠ Favorite Trails
  favoriteTrails Trail[] @relation("UserFavoriteTrails")

  // ü§ù Friends (mutual handled in app logic)
  friends      User[]   @relation("UserFriends")
  friendOf     User[]   @relation("UserFriends")

  // üí¨ Messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages MessageRecipient[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrailSystem {
  id        String   @id @default(cuid())
  name      String
  location  String?
  trails    Trail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trail {
  id             String       @id @default(cuid())
  name           String
  location       String?
  difficulty     String?
  distanceKm     Float?
  elevationGainM Float?
  description    String?
  trailSystemId  String?
  lat            Float?
  lng            Float?
  coordinates    Json
  trailSystem    TrailSystem? @relation(fields: [trailSystemId], references: [id])
  @@unique([name, location], name: "name_location")

  // üîó Many-to-many with Ride
  rides          RideTrail[]

  // ‚ù§Ô∏è Favorited by users
  favoredBy      User[] @relation("UserFavoriteTrails")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ride {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  durationMin Int
  name        String?
  notes       String?

  host        User  @relation("RideHostRelation", fields: [userId], references: [id])
  attendees   RideAttendee[]
  trails      RideTrail[]
  messages    Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üîó Join table between Ride and Trail
model RideTrail {
  rideId  String
  trailId String

  ride  Ride  @relation(fields: [rideId], references: [id], onDelete: Cascade)
  trail Trail @relation(fields: [trailId], references: [id])

  @@id([rideId, trailId])
}

model RideAttendee {
  rideId String
  userId String

  ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@id([rideId, userId])
}

// üí¨ Messages (can be individual, group, and tied to a ride)
model Message {
  id          String   @id @default(cuid())
  senderId    String
  rideId      String?  // optional link to a ride
  label       String?
  content     String

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipients  MessageRecipient[]
  ride        Ride?    @relation(fields: [rideId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
}

model MessageRecipient {
  messageId String
  userId    String
  read      Boolean @default(false)

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  @@id([messageId, userId])
}

